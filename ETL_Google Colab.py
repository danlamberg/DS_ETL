# -*- coding: utf-8 -*-
# Autor: Daniel de Oliveira Lamberg
"""Modelagem Multidimensional.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10B8GP9fn1-p1N7m5KFHjbPrC3WSPX0GJ

Nesta atividade, você deverá utilizar os dados do censo da educação superior de 2021 e integrá-los ao Data Warehouse
criado nas aulas anteriores.Para tanto, sua ETL deve usar os dados do arquivo disponível na pasta da aula,
importando os dados para as dimensões previamente criadas com o cuidado de não duplicar os dados existentes
(somente novos dados serão inseridos nas dimensões).
Deve-se carregar os dados na fact_matrículas, garantindo que o ano do censo será respeitados. Esteja atento a isso.
Pontos totais: 1,6
Prazo: 17/07/2023.
Realização individual.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')
dados = pd.read_csv('/content/drive/MyDrive/BSI/01_DATA SCIENCE/COLAB/Avaliação prática 1 - Modelagem multidimensional/microdados_censo_da_educacao_superior_2021/Microdados do Censo da Educação Superior 2021/dados/MICRODADOS_CADASTRO_CURSOS_2021.CSV', sep=';', encoding='iso-8859-1', low_memory=False)
dados.head()

dados = dados.fillna('')
#UF
dados_uf = pd.DataFrame(dados['NO_UF'].unique(), columns = ['uf'])

!pip install pymysql

import sqlite3

# Conectar ao banco de dados SQLite em memória
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

import sqlite3

# Conectar ao banco de dados SQLite em memória
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

# Executar scripts SQL para criar tabelas e inserir dados
cursor.executescript('''
CREATE TABLE IF NOT EXISTS dim_uf (
    tf_uf bigint,
    uf varchar(255)
);

CREATE TABLE IF NOT EXISTS dim_municipio (
    tf_municipio bigint,
    municipio varchar(255)
);

CREATE TABLE IF NOT EXISTS dim_modalidade (
    tf_modalidade bigint,
    modalidade varchar(255)
);

CREATE TABLE IF NOT EXISTS dim_curso (
    tf_curso bigint,
    curso varchar(255)
);

CREATE TABLE IF NOT EXISTS dim_ano (
    tf_ano bigint,
    ano varchar(255)
);

CREATE TABLE IF NOT EXISTS dim_ies (
    tf_ies bigint,
    ies varchar(255)
);

CREATE TABLE IF NOT EXISTS fact_matriculas (
    matriculas int,
    tf_municipio bigint,
    tf_uf bigint,
    tf_modalidade bigint,
    tf_curso bigint,
    tf_ano bigint,
    tf_ies bigint
);
''')

# Inserir dados nas tabelas dim_uf e dim_municipio
cursor.execute("INSERT INTO dim_uf (tf_uf, uf) VALUES (1, 'Paraná');")
cursor.execute("INSERT INTO dim_municipio (tf_municipio, municipio) VALUES (1, 'Curitiba');")

# Consultar dados das tabelas dim_uf e dim_municipio
cursor.execute('SELECT * FROM dim_uf;')
result = cursor.fetchall()
print("Dados da tabela dim_uf:", result)

cursor.execute('SELECT * FROM dim_municipio;')
result = cursor.fetchall()
print("Dados da tabela dim_municipio:", result)

# Inserir dados na tabela fact_matriculas
cursor.execute('''
INSERT INTO fact_matriculas (matriculas, tf_municipio, tf_uf)
SELECT 100 as matriculas,
       (SELECT DISTINCT tf_municipio FROM dim_municipio WHERE municipio = 'Curitiba' LIMIT 1) as tf_municipio,
       (SELECT DISTINCT tf_uf FROM dim_uf WHERE uf = 'Paraná' LIMIT 1) as tf_uf;
''')

# Consultar dados da tabela fact_matriculas
cursor.execute('SELECT * FROM fact_matriculas;')
result = cursor.fetchall()
print("Dados da tabela fact_matriculas:", result)

# Inserir dados nas tabelas dim_modalidade, dim_curso, dim_ano, dim_ies
cursor.execute("INSERT INTO dim_modalidade (tf_modalidade, modalidade) VALUES (1, 'Presencial');")
cursor.execute("INSERT INTO dim_curso (tf_curso, curso) VALUES (1, 'Ciência da Computação');")
cursor.execute("INSERT INTO dim_ano (tf_ano, ano) VALUES (1, '2022');")
cursor.execute("INSERT INTO dim_ies (tf_ies, ies) VALUES (1, 'Universidade XYZ');")

# Consultar dados das tabelas dim_modalidade, dim_curso, dim_ano, dim_ies
cursor.execute('SELECT * FROM dim_modalidade;')
result = cursor.fetchall()
print("Dados da tabela dim_modalidade:", result)

cursor.execute('SELECT * FROM dim_curso;')
result = cursor.fetchall()
print("Dados da tabela dim_curso:", result)

cursor.execute('SELECT * FROM dim_ano;')
result = cursor.fetchall()
print("Dados da tabela dim_ano:", result)

cursor.execute('SELECT * FROM dim_ies;')
result = cursor.fetchall()
print("Dados da tabela dim_ies:", result)

# Inserir dados na tabela fact_matriculas com tf_modalidade
cursor.execute('''
INSERT INTO fact_matriculas (matriculas, tf_municipio, tf_uf, tf_modalidade, tf_curso, tf_ano, tf_ies)
SELECT 100 as matriculas,
       (SELECT DISTINCT tf_municipio FROM dim_municipio WHERE municipio = 'Curitiba' LIMIT 1) as tf_municipio,
       (SELECT DISTINCT tf_uf FROM dim_uf WHERE uf = 'Paraná' LIMIT 1) as tf_uf,
       (SELECT DISTINCT tf_modalidade FROM dim_modalidade LIMIT 1) as tf_modalidade,
       (SELECT DISTINCT tf_curso FROM dim_curso LIMIT 1) as tf_curso,
       (SELECT DISTINCT tf_ano FROM dim_ano LIMIT 1) as tf_ano,
       (SELECT DISTINCT tf_ies FROM dim_ies LIMIT 1) as tf_ies;
''')

# Consultar dados da tabela fact_matriculas após a inserção
cursor.execute('SELECT * FROM fact_matriculas;')
result = cursor.fetchall()
print("Dados da tabela fact_matriculas após a inserção:", result)

for i, r in dados_uf.iterrows():
    insert_statement = 'insert into dim_uf (tf_uf, uf) values (' \
                        + str(i) +',\'' \
                        + str(r['uf']) +'\')'
    print(insert_statement)
    cursor.execute(insert_statement)
    conn.commit()

#Municipio
dados_municipio = pd.DataFrame(dados['NO_MUNICIPIO'].unique(), columns = ['Municipio'])

for i,r in dados_municipio.iterrows():
    municipio = r['Municipio']
    municipio = municipio.replace("'","")
    insert_statement = f"insert into dim_municipio (tf_municipio, municipio) values({i}, '{municipio}')"
    print(insert_statement)
    cursor.execute(insert_statement)
    conn.commit()

#Modalidade ensino
dados_modalidade = pd.DataFrame(dados['TP_MODALIDADE_ENSINO'].unique(), columns = ['tp_modalidade_ensino'])
for i,r in dados_modalidade.iterrows():
    if r['tp_modalidade_ensino'] == 1:
        insert_statement = f"insert into dim_modalidade (tf_modalidade, modalidade) values({r['tp_modalidade_ensino']}, 'Presencial')"
    elif  r['tp_modalidade_ensino'] == 2:
        insert_statement = f"insert into dim_modalidade (tf_modalidade, modalidade) values({r['tp_modalidade_ensino']}, 'EAD')"


    cursor.execute(insert_statement)
    conn.commit()

#CURSO
dados_curso = pd.DataFrame(dados['NO_CURSO'].unique(), columns = ['curso'])
for i,r in dados_curso.iterrows():
    insert_statement = f"insert into dim_curso (tf_curso, curso) values({i+1}, '{r['curso']}')"
    cursor.execute(insert_statement)
    conn.commit()

#ANO
dados_ano= pd.DataFrame(dados['NU_ANO_CENSO'].unique(), columns = ['ano'])
for i,r in dados_ano.iterrows():
    insert_statement = f"insert into dim_ano (tf_ano, ano) values({i+1}, '{r['ano']}')"
    cursor.execute(insert_statement)
    conn.commit()

#IES
dados_IES = pd.read_csv('/content/drive/MyDrive/BSI/01_DATA SCIENCE/COLAB/Avaliação prática 1 - Modelagem multidimensional/microdados_censo_da_educacao_superior_2021/Microdados do Censo da Educação Superior 2021/dados/MICRODADOS_CADASTRO_IES_2021.CSV'
                ,sep=';'
                , encoding='iso-8859-1'
                , low_memory=False)
dados_IES = dados_IES[['CO_IES','NO_IES']]


dados_IES_curso = pd.DataFrame(dados['CO_IES'].unique(), columns = ['co_ies'])
for i, r in dados_IES_curso.iterrows():
    #determinar o nome  da ies
    dados_IES_filtrado=dados_IES[dados_IES['CO_IES'] == r['co_ies']]
    no_ies = dados_IES_filtrado['NO_IES'].iloc[0].replace("'","")
    insert_statement = f"insert into dim_ies (tf_ies, ies) values({i+1}, '{no_ies}')"
    cursor.execute(insert_statement)
    conn.commit()

#Fact matriculas
for i, r in dados.iterrows():
    if r['TP_MODALIDADE_ENSINO'] == 1:
        modalidade  = 'Presencial'
    elif  r['TP_MODALIDADE_ENSINO'] == 2:
        modalidade = 'EAD'

    tf_uf_select_statement= f"select tf_uf from dim_uf where uf ='{r['NO_UF']}'" if r['NO_UF'] else "select Null from dim_uf"
    tf_municipio_select_statement= f"select tf_municipio from dim_municipio where municipio = '{r['NO_MUNICIPIO']}'" if r['NO_MUNICIPIO'] else "select Null from dim_municipio"

    dados_IES_filtrado=dados_IES[dados_IES['CO_IES'] == r['CO_IES']]
    no_ies = dados_IES_filtrado['NO_IES'].iloc[0].replace("'","")

    insert_statement = f"""insert into fact_matriculas(matriculas,tf_ano,tf_curso,tf_ies,tf_uf,tf_municipio,tf_modalidade)
    select distinct * from
    (select {r['QT_INSCRITO_TOTAL']}) as matriculas,
    (select tf_ano from dim_ano where ano = {r['NU_ANO_CENSO']}) as tf_ano,
    (select tf_curso from dim_curso where curso = '{r['NO_CURSO']}') as tf_curso,
    (select tf_ies from dim_ies where ies = '{no_ies}') as tf_ies,
    ({tf_uf_select_statement}) as tf_uf,
    ({tf_municipio_select_statement}) as tf_municipio,
    (select tf_modalidade from dim_modalidade where modalidade = '{modalidade}') as tf_modalidade
    """
    print(insert_statement)
    cursor.execute(insert_statement)
    conn.commit()
print('Acabou!')